<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="Patrol/AddWayPoint" type="0" type_size="1" nature="4" stm_value_name="Patrol/AddWayPoint" inner="1" tooltip="Patrol/AddWayPoint desc" id="4" />
        <Input name="Patrol/StartPatrol" type="0" type_size="1" nature="4" stm_value_name="Patrol/StartPatrol" inner="1" tooltip="Patrol/StartPatrol desc" id="5" />
        <Input name="Patrol/Reset" type="0" type_size="1" nature="4" stm_value_name="Patrol/Reset" inner="1" tooltip="Patrol/Reset desc" id="6" />
        <Input name="Patrol/LoadExploration" type="0" type_size="1" nature="4" stm_value_name="Patrol/LoadExploration" inner="1" tooltip="Patrol/LoadExploration desc" id="7" />
        <Input name="Patrol/Relocalize" type="0" type_size="1" nature="4" stm_value_name="Patrol/Relocalize" inner="1" tooltip="Patrol/Relocalize desc" id="8" />
        <Input name="Patrol/Exit" type="0" type_size="1" nature="4" stm_value_name="Patrol/Exit" inner="1" tooltip="Patrol/Exit desc" id="9" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="10" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="247" y="27">
                            <bitmap>media/images/box/root.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" />
                            <Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" />
                        </Box>
                        <Box name="Patrol panel" id="1" localization="8" tooltip="" x="832" y="285">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import base64
import cv2
import cv
import numpy as np
import time
import almath as m
import qi

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.session = qi.Session()
        self.session.connect("tcp://127.0.0.1:9559")
        self.mem = self.session.service("ALMemory")
        self.nav = self.session.service("ALNavigation")
        self.tts = self.session.service("ALAnimatedSpeech")
        self.waypoints = []
        self.waypointsPx = []

    def onLoad(self):
        self.mem.declareEvent("Patrol/MetricalMap")
        self.mem.declareEvent("Patrol/NavigateTo")
        self.mem.declareEvent("Patrol/Waypoints")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def updateMap(self):
        # Get the map from navigation.
        map = self.nav.getMetricalMap()
        mpp = map[0]
        size = map[1]
        originOffset = m.Position2D(map[3])
        data = map[4]
        # Fit the size of the image
        img = np.array(data, np.uint8).reshape(size, size, 1)
        img = (100 - img) * 2.5
        shape = img.shape
        img = img.transpose((1, 0, 2)) # Do not transpose the channels.
        tabletSize = 720
        img = cv2.resize(img, (tabletSize, tabletSize))
        mpp = size * mpp / tabletSize
        size = tabletSize
        shape = img.shape
        #convert to color
        cv_img = img.astype(np.uint8)
        color_img = cv2.cvtColor(cv_img, cv.CV_GRAY2RGB)
        self.occMap = m.OccupancyMapParams(size, mpp, originOffset)
        self.occMap.originOffset = originOffset
        # png
        flag, buff = cv2.imencode(".png", color_img)
        # base 64
        buff64 = base64.b64encode(buff)
        full = "data:image/png;base64," + buff64
        # show app
        self.mem.raiseEvent("Patrol/MetricalMap", [mpp, size, map[3], full])

    def updateRobotPosition(self):
        robot_pose = m.Pose2D(self.nav.getRobotPositionInMap()[0])
        position = m.Position2D(robot_pose.x, robot_pose.y)
        pxl = self.occMap.getPixelFromPosition(position)
        pxl_front = self.occMap.getPixelFromPosition(m.position2DFromPose2D(robot_pose * m.Pose2D(0.2, 0, 0)))
        radius = 0.2 / self.occMap.metersPerPixel
        self.mem.raiseEvent("Patrol/RobotPosition", [[int(pxl.x), int(pxl.y)], int(radius), [int(pxl_front.x), int(pxl_front.y)]])

    def onInput_onStart(self):
        self.updateMap()
        self.tts.say("Please tell me where I am by clicking the map")
        self.onStopped()

    def onInput_onRelocalize(self, target):
        px = m.Point2Di(target[0], target[1])
        metrical_target = self.occMap.getPositionFromPixel(px)
        self.logger.info("px: " + str(px))
        self.logger.info("relocalize at: " + str(metrical_target))
        try:
            self.nav.relocalizeInMap([metrical_target.x, metrical_target.y, 0.0])
            self.nav.startLocalization()
            self.updateRobotPosition()
            self.tts.say("Click the button to configure Patrol")
        except Exception as e:
            self.logger.info(str(e))

    def onInput_onAddWayPoint(self, target):
        metrical_target = self.occMap.getPositionFromPixel(m.Point2Di(target[0], target[1]))
        self.logger.info("add waypoint")
        self.waypoints.append(metrical_target)
        self.waypointsPx.append([target[0], target[1]])
        self.mem.raiseEvent("Patrol/Waypoints", self.waypointsPx)

    def onInput_onStartPatrol(self):
        self.tts.say("Let's patrol")
        start = self.nav.getRobotPositionInMap()[0]
        target = self.waypoints
        max_attempts = 5
        for pt in self.waypoints:
            attempt = 1
            while (attempt <= max_attempts):
                fut = self.nav.navigateToInMap([pt.x, pt.y, 0.0], _async=True)
                while (fut.isRunning()):
                    self.updateRobotPosition()
                    time.sleep(0.2)
                if fut.value() != 0:
                    self.tts.say("oops, there is an obstacle")
                    attempt += 1
                else:
                    break
            if attempt > max_attempts:
                self.tts.say("I cannot reach this point, let's skip it")
            else:
                self.tts.say("Alright, this point is reached")
            time.sleep(0.5)
        self.tts.say("My patrol is done")

    def onInput_onReset(self):
        self.waypoints = []
        self.waypointsPx = []
        self.mem.raiseEvent("Patrol/Waypoints", self.waypointsPx)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onAddWayPoint" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Input name="onStartPatrol" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Input name="onReset" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                            <Input name="onRelocalize" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="8" />
                        </Box>
                        <Box name="Say exit" id="5" localization="8" tooltip="" x="978" y="11">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALAnimatedSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.say("OK I exit this.")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Sleep 3" id="6" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="372" y="19">
                            <bitmap>media/images/box/wait.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="3" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                        </Box>
                        <Box name="Say aa" id="4" localization="8" tooltip="" x="504" y="26">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tts = ALProxy('ALAnimatedSpeech')

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.say("Please load the correct exploration")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Load Map" id="7" localization="8" tooltip="" x="664" y="63">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import qi

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.mem = self.session().service("ALMemory")
        self.nav = self.session().service("ALNavigation")
        self.tts = self.session().service("ALAnimatedSpeech")
        self.events = {"exploList" : "Patrol/AvailableExplo"}
        self.declareEvents()
        self.applicationName = "Explorer"
        pass

    def declareEvents(self):
        for k in self.events:
            self.mem.declareEvent(self.events[k])

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        list = qi.path.listData(self.applicationName, "*.explo")
        if len(list) < 1:
            self.tts.say("I have never been here, please use explore app before.")
            self.onError()
        self.mem.raiseEvent(self.events["exploList"], list)
        pass

    def onInput_onLoadExplo(self, exploName):
        self.logger.info(exploName)
        self.nav.loadExploration(exploName)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onLoadExplo" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Output name="onError" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                        </Box>
                        <Link inputowner="0" indexofinput="10" outputowner="5" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="4" outputowner="0" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="5" outputowner="0" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="6" outputowner="0" indexofoutput="6" />
                        <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="7" />
                        <Link inputowner="1" indexofinput="2" outputowner="7" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="7" outputowner="0" indexofoutput="8" />
                        <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="6" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="9" />
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
